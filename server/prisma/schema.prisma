// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {

  id String @id @default(uuid())
  
  identificationNumber String @map("identification number") @unique
  firstName            String? @map("first_name")
  lastName             String? @map("last_name")
  password             String
  phone                String?
  role                 Role?  @default(PATIENT)

  Order Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Admin {
  id String @id @default(uuid())
  
  username String 
  password String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Category {
  id    String @id @default(uuid())
  categoryName String @map("category_name")

  medicine Medicine[]
}

model Medicine {
  id         String @id @default(uuid())
  medicineName String @map("medicine_name")
  price        Float
  categoryId   String?

  




  orderMedicine OrderMedicine[]

  Category Category? @relation(fields: [categoryId], references: [id])
}

model Order {
  id         String @id @default(uuid())
  userId     String?
  symptom    String?
  totalPrice Float    @map("total_price")
  doctorId   String?
  patientId  String?
  payment    Payment?
  status     Boolean  @default(false)

  orderMedicine OrderMedicine[]

  User User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Payment {
  id             String @id @default(uuid())
  banking_name String
  order        Order?   @relation(fields: [orderId], references: [id])
  orderId      String      @unique
  createdAt    DateTime @default(now()) @map("created_at")
}

model OrderMedicine {
  orderId    String
  medicineId String
  order      Order?    @relation(fields: [orderId], references: [id])
  medicine   Medicine? @relation(fields: [medicineId], references: [id])

  @@id([medicineId, orderId])
  @@map("Order_medicine")
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}
